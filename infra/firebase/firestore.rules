rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function currentUserDoc() {
      return isAuthenticated()
        ? get(/databases/$(database)/documents/users/$(request.auth.uid))
        : null;
    }

    function isAdmin() {
      return isAuthenticated() &&
        currentUserDoc() != null &&
        currentUserDoc().data.role in ['admin', 'owner'];
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function membershipDoc(orgId) {
      return isAuthenticated()
        ? get(/databases/$(database)/documents/orgs/$(orgId)/members/$(request.auth.uid))
        : null;
    }

    function orgMember(orgId) {
      return membershipDoc(orgId) != null;
    }

    function hasOrgRole(orgId, roles) {
      return orgMember(orgId) && membershipDoc(orgId).data.role in roles;
    }

    function isOrgOwner(orgId) {
      return hasOrgRole(orgId, ['owner']);
    }

    function isOrgAdmin(orgId) {
      return hasOrgRole(orgId, ['owner', 'admin']);
    }

    function isContributor(orgId) {
      return hasOrgRole(orgId, ['owner', 'admin', 'member']);
    }

    match /orgs/{orgId} {
      allow read: if isAuthenticated() && orgMember(orgId);
      allow create: if isAuthenticated();
      allow update: if isOrgAdmin(orgId);
      allow delete: if isOrgOwner(orgId);

      match /members/{uid} {
        allow read: if isOrgAdmin(orgId) || request.auth.uid == uid;
        allow create: if isOrgOwner(orgId) ||
          (request.auth.uid == uid && request.resource.data.role == 'owner');
        allow update: if isOrgOwner(orgId) ||
          (request.auth.uid == uid && !('role' in request.resource.data));
        allow delete: if isOrgOwner(orgId);
      }

      match /projects/{projectId} {
        allow read: if orgMember(orgId);
        allow create: if isContributor(orgId);
        allow update: if isContributor(orgId);
        allow delete: if isOrgAdmin(orgId);

        match /tasks/{taskId} {
          allow read: if orgMember(orgId);
          allow create: if isContributor(orgId);
          allow update: if isContributor(orgId);
          allow delete: if isOrgAdmin(orgId);
        }

        match /columns/{columnId} {
          allow read: if orgMember(orgId);
          allow create, update: if isContributor(orgId);
          allow delete: if isOrgAdmin(orgId);
        }
      }

      match /sprints/{sprintId} {
        allow read: if orgMember(orgId);
        allow create, update: if isContributor(orgId);
        allow delete: if isOrgAdmin(orgId);
      }

      match /timeSessions/{sessionId} {
        allow read: if orgMember(orgId);
        allow create: if isContributor(orgId) &&
          request.resource.data.userId == request.auth.uid;
        allow update: if isContributor(orgId) &&
          resource.data.userId == request.auth.uid;
        allow delete: if isOrgAdmin(orgId) ||
          resource.data.userId == request.auth.uid;
      }

      match /goals/{goalId} {
        allow read: if orgMember(orgId);
        allow create: if isContributor(orgId) &&
          request.resource.data.userId == request.auth.uid;
        allow update: if resource.data.userId == request.auth.uid;
        allow delete: if resource.data.userId == request.auth.uid;
      }

      match /breaks/{breakId} {
        allow read: if orgMember(orgId);
        allow create: if isContributor(orgId) &&
          request.resource.data.userId == request.auth.uid;
        allow update: if resource.data.userId == request.auth.uid;
        allow delete: if resource.data.userId == request.auth.uid;
      }

      match /focusSessions/{sessionId} {
        allow read: if orgMember(orgId);
        allow create: if isContributor(orgId) &&
          request.resource.data.userId == request.auth.uid;
        allow update: if resource.data.userId == request.auth.uid;
        allow delete: if resource.data.userId == request.auth.uid;
      }

      match /categories/{categoryId} {
        allow read: if orgMember(orgId);
        allow create: if isContributor(orgId);
        allow update: if isContributor(orgId);
        allow delete: if isOrgAdmin(orgId);
      }

      match /integrations/{integrationId} {
        allow read: if orgMember(orgId);
        allow create: if isOrgAdmin(orgId);
        allow update: if isOrgAdmin(orgId);
        allow delete: if isOrgAdmin(orgId);
      }
    }

    match /timeEntries/{entryId} {
      allow read: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid || isAdmin());

      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.start is timestamp &&
        (!('end' in request.resource.data) ||
          request.resource.data.end is timestamp) &&
        (!('duration' in request.resource.data) ||
          request.resource.data.duration is int);

      allow update: if isAuthenticated() &&
        resource != null &&
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == resource.data.userId;

      allow delete: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid || isAdmin());
    }

    match /savedViews/{viewId} {
      allow read: if isAuthenticated() &&
        (
          resource.data.ownerId == request.auth.uid ||
          (resource.data.scope == 'org' &&
            resource.data.orgId != null &&
            orgMember(resource.data.orgId))
        );

      allow create, update, delete: if isAuthenticated() &&
        request.resource.data.ownerId == request.auth.uid;
    }

    match /activity/{activityId} {
      allow read: if isAuthenticated() &&
        (resource.data.userId == request.auth.uid || isAdmin());

      allow write: if false;
    }

    match /users/{uid} {
      allow read: if isOwner(uid);
      allow create: if isOwner(uid);
      allow update: if isOwner(uid) && !('role' in request.resource.data);
    }
  }
}
