rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function membershipDoc(orgId) {
      return get(/databases/$(database)/documents/orgs/$(orgId)/members/$(request.auth.uid));
    }
    function orgMember(orgId) { return membershipDoc(orgId).exists(); }
    function hasRole(orgId, roles) {
      return orgMember(orgId) && membershipDoc(orgId).data.role in roles;
    }
    function isOwner(orgId) { return hasRole(orgId, ['owner']); }
    function isAdmin(orgId) { return hasRole(orgId, ['owner','admin']); }
    function isContributor(orgId) { return hasRole(orgId, ['owner','admin','member']); }

    // Org root document
    match /orgs/{orgId} {
      allow read: if isSignedIn() && orgMember(orgId);
      allow update: if isAdmin(orgId); // restrict sensitive updates
      allow delete: if isOwner(orgId);
      allow create: if isSignedIn(); // creating an org provisions membership via backend

      // Members subcollection
      match /members/{uid} {
        allow read: if isAdmin(orgId) || request.auth.uid == uid;
        allow create: if isOwner(orgId);
        allow update: if isOwner(orgId) || (request.auth.uid == uid && !("role" in request.resource.data));
        allow delete: if isOwner(orgId);
      }

      // Projects subcollection
      match /projects/{projectId} {
        allow read: if orgMember(orgId);
        allow create: if isContributor(orgId);
        allow update: if isContributor(orgId);
        allow delete: if isAdmin(orgId);

        // Tasks subcollection
        match /tasks/{taskId} {
          allow read: if orgMember(orgId);
          allow create: if isContributor(orgId);
          allow update: if isContributor(orgId);
          allow delete: if isAdmin(orgId);
        }

        // Columns
        match /columns/{columnId} {
          allow read: if orgMember(orgId);
          allow create, update: if isContributor(orgId);
          allow delete: if isAdmin(orgId);
        }

        // Sprints
        match /sprints/{sprintId} {
          allow read: if orgMember(orgId);
          allow create, update: if isContributor(orgId);
          allow delete: if isAdmin(orgId);
        }
      }
    }

    // Users documents - self only
    match /users/{uid} {
      allow read: if isSignedIn() && request.auth.uid == uid;
      allow update: if isSignedIn() && request.auth.uid == uid && !('role' in request.resource.data);
      allow create: if isSignedIn() && request.auth.uid == uid;
    }
  }
}